//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace APIRetroalimentacion.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HorasBecaEntities : DbContext
    {
        public HorasBecaEntities()
            : base("name=HorasBecaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BANCO> BANCO { get; set; }
        public virtual DbSet<BECA> BECA { get; set; }
        public virtual DbSet<BECAAE> BECAAE { get; set; }
        public virtual DbSet<BECAHATU> BECAHATU { get; set; }
        public virtual DbSet<BECAXPERIODO> BECAXPERIODO { get; set; }
        public virtual DbSet<CARRERA> CARRERA { get; set; }
        public virtual DbSet<ESTADO> ESTADO { get; set; }
        public virtual DbSet<ESTADOSOLICITUD> ESTADOSOLICITUD { get; set; }
        public virtual DbSet<estudiantes> estudiantes { get; set; }
        public virtual DbSet<EVALUACION> EVALUACION { get; set; }
        public virtual DbSet<MENSAJE> MENSAJE { get; set; }
        public virtual DbSet<MENSAJENUEVO> MENSAJENUEVO { get; set; }
        public virtual DbSet<PERIODO> PERIODO { get; set; }
        public virtual DbSet<RESPONSABLEXESTUDIANTE> RESPONSABLEXESTUDIANTE { get; set; }
        public virtual DbSet<rol> rol { get; set; }
        public virtual DbSet<SEMESTRE> SEMESTRE { get; set; }
        public virtual DbSet<sistema_informacion> sistema_informacion { get; set; }
        public virtual DbSet<SOLICITUD> SOLICITUD { get; set; }
        public virtual DbSet<TRANSACCIONES> TRANSACCIONES { get; set; }
        public virtual DbSet<usuario> usuario { get; set; }
    
        public virtual int evaluarAsistente(string idEstudiante, Nullable<int> idResponsable, string observacion, Nullable<bool> recomendable, Nullable<int> horasLaboradas, Nullable<int> idSolicitud)
        {
            var idEstudianteParameter = idEstudiante != null ?
                new ObjectParameter("IdEstudiante", idEstudiante) :
                new ObjectParameter("IdEstudiante", typeof(string));
    
            var idResponsableParameter = idResponsable.HasValue ?
                new ObjectParameter("IdResponsable", idResponsable) :
                new ObjectParameter("IdResponsable", typeof(int));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            var recomendableParameter = recomendable.HasValue ?
                new ObjectParameter("Recomendable", recomendable) :
                new ObjectParameter("Recomendable", typeof(bool));
    
            var horasLaboradasParameter = horasLaboradas.HasValue ?
                new ObjectParameter("HorasLaboradas", horasLaboradas) :
                new ObjectParameter("HorasLaboradas", typeof(int));
    
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("evaluarAsistente", idEstudianteParameter, idResponsableParameter, observacionParameter, recomendableParameter, horasLaboradasParameter, idSolicitudParameter);
        }
    
        public virtual int editarAsistente(Nullable<int> idEvaluacion, string observacion, Nullable<bool> recomendable, Nullable<int> horasLaboradas)
        {
            var idEvaluacionParameter = idEvaluacion.HasValue ?
                new ObjectParameter("IdEvaluacion", idEvaluacion) :
                new ObjectParameter("IdEvaluacion", typeof(int));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            var recomendableParameter = recomendable.HasValue ?
                new ObjectParameter("Recomendable", recomendable) :
                new ObjectParameter("Recomendable", typeof(bool));
    
            var horasLaboradasParameter = horasLaboradas.HasValue ?
                new ObjectParameter("HorasLaboradas", horasLaboradas) :
                new ObjectParameter("HorasLaboradas", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarAsistente", idEvaluacionParameter, observacionParameter, recomendableParameter, horasLaboradasParameter);
        }
    }
}
