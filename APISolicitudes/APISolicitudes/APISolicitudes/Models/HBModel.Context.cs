//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace APISolicitudes.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HorasBecaEntities : DbContext
    {
        public HorasBecaEntities()
            : base("name=HorasBecaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BANCO> BANCO { get; set; }
        public virtual DbSet<BECA> BECA { get; set; }
        public virtual DbSet<BECAAE> BECAAE { get; set; }
        public virtual DbSet<BECAHATU> BECAHATU { get; set; }
        public virtual DbSet<BECAXPERIODO> BECAXPERIODO { get; set; }
        public virtual DbSet<CARRERA> CARRERA { get; set; }
        public virtual DbSet<ESTADO> ESTADO { get; set; }
        public virtual DbSet<ESTADOSOLICITUD> ESTADOSOLICITUD { get; set; }
        public virtual DbSet<estudiantes> estudiantes { get; set; }
        public virtual DbSet<EVALUACION> EVALUACION { get; set; }
        public virtual DbSet<MENSAJE> MENSAJE { get; set; }
        public virtual DbSet<MENSAJENUEVO> MENSAJENUEVO { get; set; }
        public virtual DbSet<PERIODO> PERIODO { get; set; }
        public virtual DbSet<RESPONSABLEXESTUDIANTE> RESPONSABLEXESTUDIANTE { get; set; }
        public virtual DbSet<rol> rol { get; set; }
        public virtual DbSet<SEMESTRE> SEMESTRE { get; set; }
        public virtual DbSet<sistema_informacion> sistema_informacion { get; set; }
        public virtual DbSet<SOLICITUD> SOLICITUD { get; set; }
        public virtual DbSet<TRANSACCIONES> TRANSACCIONES { get; set; }
        public virtual DbSet<usuario> usuario { get; set; }
    
        public virtual int almacenarSolicitudHE(Nullable<int> cedula, string carne, string nombre, string apellido1, string apellido2, string email, Nullable<int> telefono, Nullable<int> estado, Nullable<System.DateTime> fechaAlmacenamiento, Nullable<bool> cumpleRequisitos, Nullable<bool> otraBeca, string otraEscuela, Nullable<int> otraHoras, Nullable<int> ponderadoAnterior, Nullable<int> ponderadoGeneral, Nullable<int> creditosAprobadosAnterior, Nullable<int> creditosAprobadosTotal, Nullable<int> creditosSemestreActual, Nullable<int> cursosPendientes, Nullable<int> anosActivoTec, Nullable<int> numeroCuenta, byte[] screenShotCedula, byte[] screenShotPonderadoAnterior, byte[] screenShotPonderadoGeneral, byte[] screenShotCreditosAprobadosAnterior, byte[] screenShotCreditosAprobadosTotal, byte[] screenShotCuentaBanco, Nullable<int> idBanco, Nullable<int> idSemestre, string abreviaturaBeca, Nullable<int> carrera)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var carneParameter = carne != null ?
                new ObjectParameter("Carne", carne) :
                new ObjectParameter("Carne", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            var fechaAlmacenamientoParameter = fechaAlmacenamiento.HasValue ?
                new ObjectParameter("FechaAlmacenamiento", fechaAlmacenamiento) :
                new ObjectParameter("FechaAlmacenamiento", typeof(System.DateTime));
    
            var cumpleRequisitosParameter = cumpleRequisitos.HasValue ?
                new ObjectParameter("CumpleRequisitos", cumpleRequisitos) :
                new ObjectParameter("CumpleRequisitos", typeof(bool));
    
            var otraBecaParameter = otraBeca.HasValue ?
                new ObjectParameter("OtraBeca", otraBeca) :
                new ObjectParameter("OtraBeca", typeof(bool));
    
            var otraEscuelaParameter = otraEscuela != null ?
                new ObjectParameter("OtraEscuela", otraEscuela) :
                new ObjectParameter("OtraEscuela", typeof(string));
    
            var otraHorasParameter = otraHoras.HasValue ?
                new ObjectParameter("OtraHoras", otraHoras) :
                new ObjectParameter("OtraHoras", typeof(int));
    
            var ponderadoAnteriorParameter = ponderadoAnterior.HasValue ?
                new ObjectParameter("PonderadoAnterior", ponderadoAnterior) :
                new ObjectParameter("PonderadoAnterior", typeof(int));
    
            var ponderadoGeneralParameter = ponderadoGeneral.HasValue ?
                new ObjectParameter("PonderadoGeneral", ponderadoGeneral) :
                new ObjectParameter("PonderadoGeneral", typeof(int));
    
            var creditosAprobadosAnteriorParameter = creditosAprobadosAnterior.HasValue ?
                new ObjectParameter("CreditosAprobadosAnterior", creditosAprobadosAnterior) :
                new ObjectParameter("CreditosAprobadosAnterior", typeof(int));
    
            var creditosAprobadosTotalParameter = creditosAprobadosTotal.HasValue ?
                new ObjectParameter("CreditosAprobadosTotal", creditosAprobadosTotal) :
                new ObjectParameter("CreditosAprobadosTotal", typeof(int));
    
            var creditosSemestreActualParameter = creditosSemestreActual.HasValue ?
                new ObjectParameter("CreditosSemestreActual", creditosSemestreActual) :
                new ObjectParameter("CreditosSemestreActual", typeof(int));
    
            var cursosPendientesParameter = cursosPendientes.HasValue ?
                new ObjectParameter("CursosPendientes", cursosPendientes) :
                new ObjectParameter("CursosPendientes", typeof(int));
    
            var anosActivoTecParameter = anosActivoTec.HasValue ?
                new ObjectParameter("AnosActivoTec", anosActivoTec) :
                new ObjectParameter("AnosActivoTec", typeof(int));
    
            var numeroCuentaParameter = numeroCuenta.HasValue ?
                new ObjectParameter("NumeroCuenta", numeroCuenta) :
                new ObjectParameter("NumeroCuenta", typeof(int));
    
            var screenShotCedulaParameter = screenShotCedula != null ?
                new ObjectParameter("ScreenShotCedula", screenShotCedula) :
                new ObjectParameter("ScreenShotCedula", typeof(byte[]));
    
            var screenShotPonderadoAnteriorParameter = screenShotPonderadoAnterior != null ?
                new ObjectParameter("ScreenShotPonderadoAnterior", screenShotPonderadoAnterior) :
                new ObjectParameter("ScreenShotPonderadoAnterior", typeof(byte[]));
    
            var screenShotPonderadoGeneralParameter = screenShotPonderadoGeneral != null ?
                new ObjectParameter("ScreenShotPonderadoGeneral", screenShotPonderadoGeneral) :
                new ObjectParameter("ScreenShotPonderadoGeneral", typeof(byte[]));
    
            var screenShotCreditosAprobadosAnteriorParameter = screenShotCreditosAprobadosAnterior != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", screenShotCreditosAprobadosAnterior) :
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", typeof(byte[]));
    
            var screenShotCreditosAprobadosTotalParameter = screenShotCreditosAprobadosTotal != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", screenShotCreditosAprobadosTotal) :
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", typeof(byte[]));
    
            var screenShotCuentaBancoParameter = screenShotCuentaBanco != null ?
                new ObjectParameter("ScreenShotCuentaBanco", screenShotCuentaBanco) :
                new ObjectParameter("ScreenShotCuentaBanco", typeof(byte[]));
    
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("IdBanco", idBanco) :
                new ObjectParameter("IdBanco", typeof(int));
    
            var idSemestreParameter = idSemestre.HasValue ?
                new ObjectParameter("IdSemestre", idSemestre) :
                new ObjectParameter("IdSemestre", typeof(int));
    
            var abreviaturaBecaParameter = abreviaturaBeca != null ?
                new ObjectParameter("AbreviaturaBeca", abreviaturaBeca) :
                new ObjectParameter("AbreviaturaBeca", typeof(string));
    
            var carreraParameter = carrera.HasValue ?
                new ObjectParameter("Carrera", carrera) :
                new ObjectParameter("Carrera", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("almacenarSolicitudHE", cedulaParameter, carneParameter, nombreParameter, apellido1Parameter, apellido2Parameter, emailParameter, telefonoParameter, estadoParameter, fechaAlmacenamientoParameter, cumpleRequisitosParameter, otraBecaParameter, otraEscuelaParameter, otraHorasParameter, ponderadoAnteriorParameter, ponderadoGeneralParameter, creditosAprobadosAnteriorParameter, creditosAprobadosTotalParameter, creditosSemestreActualParameter, cursosPendientesParameter, anosActivoTecParameter, numeroCuentaParameter, screenShotCedulaParameter, screenShotPonderadoAnteriorParameter, screenShotPonderadoGeneralParameter, screenShotCreditosAprobadosAnteriorParameter, screenShotCreditosAprobadosTotalParameter, screenShotCuentaBancoParameter, idBancoParameter, idSemestreParameter, abreviaturaBecaParameter, carreraParameter);
        }
    
        public virtual int editarSolicitudHE(Nullable<int> id, Nullable<int> cedula, string carne, string nombre, string apellido1, string apellido2, string email, Nullable<int> telefono, Nullable<System.DateTime> fechaAlmacenamiento, Nullable<bool> cumpleRequisitos, Nullable<bool> otraBeca, string otraEscuela, Nullable<int> otraHoras, Nullable<int> ponderadoAnterior, Nullable<int> ponderadoGeneral, Nullable<int> creditosAprobadosAnterior, Nullable<int> creditosAprobadosTotal, Nullable<int> creditosSemestreActual, Nullable<int> cursosPendientes, Nullable<int> anosActivoTec, Nullable<int> numeroCuenta, byte[] screenShotCedula, byte[] screenShotPonderadoAnterior, byte[] screenShotPonderadoGeneral, byte[] screenShotCreditosAprobadosAnterior, byte[] screenShotCreditosAprobadosTotal, byte[] screenShotCuentaBanco, Nullable<int> idBanco, Nullable<int> idSemestre, Nullable<int> carrera)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var carneParameter = carne != null ?
                new ObjectParameter("Carne", carne) :
                new ObjectParameter("Carne", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var fechaAlmacenamientoParameter = fechaAlmacenamiento.HasValue ?
                new ObjectParameter("FechaAlmacenamiento", fechaAlmacenamiento) :
                new ObjectParameter("FechaAlmacenamiento", typeof(System.DateTime));
    
            var cumpleRequisitosParameter = cumpleRequisitos.HasValue ?
                new ObjectParameter("CumpleRequisitos", cumpleRequisitos) :
                new ObjectParameter("CumpleRequisitos", typeof(bool));
    
            var otraBecaParameter = otraBeca.HasValue ?
                new ObjectParameter("OtraBeca", otraBeca) :
                new ObjectParameter("OtraBeca", typeof(bool));
    
            var otraEscuelaParameter = otraEscuela != null ?
                new ObjectParameter("OtraEscuela", otraEscuela) :
                new ObjectParameter("OtraEscuela", typeof(string));
    
            var otraHorasParameter = otraHoras.HasValue ?
                new ObjectParameter("OtraHoras", otraHoras) :
                new ObjectParameter("OtraHoras", typeof(int));
    
            var ponderadoAnteriorParameter = ponderadoAnterior.HasValue ?
                new ObjectParameter("PonderadoAnterior", ponderadoAnterior) :
                new ObjectParameter("PonderadoAnterior", typeof(int));
    
            var ponderadoGeneralParameter = ponderadoGeneral.HasValue ?
                new ObjectParameter("PonderadoGeneral", ponderadoGeneral) :
                new ObjectParameter("PonderadoGeneral", typeof(int));
    
            var creditosAprobadosAnteriorParameter = creditosAprobadosAnterior.HasValue ?
                new ObjectParameter("CreditosAprobadosAnterior", creditosAprobadosAnterior) :
                new ObjectParameter("CreditosAprobadosAnterior", typeof(int));
    
            var creditosAprobadosTotalParameter = creditosAprobadosTotal.HasValue ?
                new ObjectParameter("CreditosAprobadosTotal", creditosAprobadosTotal) :
                new ObjectParameter("CreditosAprobadosTotal", typeof(int));
    
            var creditosSemestreActualParameter = creditosSemestreActual.HasValue ?
                new ObjectParameter("CreditosSemestreActual", creditosSemestreActual) :
                new ObjectParameter("CreditosSemestreActual", typeof(int));
    
            var cursosPendientesParameter = cursosPendientes.HasValue ?
                new ObjectParameter("CursosPendientes", cursosPendientes) :
                new ObjectParameter("CursosPendientes", typeof(int));
    
            var anosActivoTecParameter = anosActivoTec.HasValue ?
                new ObjectParameter("AnosActivoTec", anosActivoTec) :
                new ObjectParameter("AnosActivoTec", typeof(int));
    
            var numeroCuentaParameter = numeroCuenta.HasValue ?
                new ObjectParameter("NumeroCuenta", numeroCuenta) :
                new ObjectParameter("NumeroCuenta", typeof(int));
    
            var screenShotCedulaParameter = screenShotCedula != null ?
                new ObjectParameter("ScreenShotCedula", screenShotCedula) :
                new ObjectParameter("ScreenShotCedula", typeof(byte[]));
    
            var screenShotPonderadoAnteriorParameter = screenShotPonderadoAnterior != null ?
                new ObjectParameter("ScreenShotPonderadoAnterior", screenShotPonderadoAnterior) :
                new ObjectParameter("ScreenShotPonderadoAnterior", typeof(byte[]));
    
            var screenShotPonderadoGeneralParameter = screenShotPonderadoGeneral != null ?
                new ObjectParameter("ScreenShotPonderadoGeneral", screenShotPonderadoGeneral) :
                new ObjectParameter("ScreenShotPonderadoGeneral", typeof(byte[]));
    
            var screenShotCreditosAprobadosAnteriorParameter = screenShotCreditosAprobadosAnterior != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", screenShotCreditosAprobadosAnterior) :
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", typeof(byte[]));
    
            var screenShotCreditosAprobadosTotalParameter = screenShotCreditosAprobadosTotal != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", screenShotCreditosAprobadosTotal) :
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", typeof(byte[]));
    
            var screenShotCuentaBancoParameter = screenShotCuentaBanco != null ?
                new ObjectParameter("ScreenShotCuentaBanco", screenShotCuentaBanco) :
                new ObjectParameter("ScreenShotCuentaBanco", typeof(byte[]));
    
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("IdBanco", idBanco) :
                new ObjectParameter("IdBanco", typeof(int));
    
            var idSemestreParameter = idSemestre.HasValue ?
                new ObjectParameter("IdSemestre", idSemestre) :
                new ObjectParameter("IdSemestre", typeof(int));
    
            var carreraParameter = carrera.HasValue ?
                new ObjectParameter("Carrera", carrera) :
                new ObjectParameter("Carrera", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarSolicitudHE", idParameter, cedulaParameter, carneParameter, nombreParameter, apellido1Parameter, apellido2Parameter, emailParameter, telefonoParameter, fechaAlmacenamientoParameter, cumpleRequisitosParameter, otraBecaParameter, otraEscuelaParameter, otraHorasParameter, ponderadoAnteriorParameter, ponderadoGeneralParameter, creditosAprobadosAnteriorParameter, creditosAprobadosTotalParameter, creditosSemestreActualParameter, cursosPendientesParameter, anosActivoTecParameter, numeroCuentaParameter, screenShotCedulaParameter, screenShotPonderadoAnteriorParameter, screenShotPonderadoGeneralParameter, screenShotCreditosAprobadosAnteriorParameter, screenShotCreditosAprobadosTotalParameter, screenShotCuentaBancoParameter, idBancoParameter, idSemestreParameter, carreraParameter);
        }
    
        public virtual int duplicar(Nullable<int> id, Nullable<int> idSemestre, Nullable<System.DateTime> fecha, string abreviaturaBeca)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idSemestreParameter = idSemestre.HasValue ?
                new ObjectParameter("IdSemestre", idSemestre) :
                new ObjectParameter("IdSemestre", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var abreviaturaBecaParameter = abreviaturaBeca != null ?
                new ObjectParameter("AbreviaturaBeca", abreviaturaBeca) :
                new ObjectParameter("AbreviaturaBeca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("duplicar", idParameter, idSemestreParameter, fechaParameter, abreviaturaBecaParameter);
        }
    
        public virtual int almacenarSolicitudAE(Nullable<int> cedula, string carne, string nombre, string apellido1, string apellido2, string email, Nullable<int> telefono, Nullable<int> estado, Nullable<System.DateTime> fechaAlmacenamiento, Nullable<bool> cumpleRequisitos, Nullable<bool> otraBeca, string otraEscuela, Nullable<int> otraHoras, Nullable<int> ponderadoAnterior, Nullable<int> ponderadoGeneral, Nullable<int> creditosAprobadosAnterior, Nullable<int> creditosAprobadosTotal, Nullable<int> creditosSemestreActual, Nullable<int> cursosPendientes, Nullable<int> anosActivoTec, Nullable<int> numeroCuenta, byte[] screenShotCedula, byte[] screenShotPonderadoAnterior, byte[] screenShotPonderadoGeneral, byte[] screenShotCreditosAprobadosAnterior, byte[] screenShotCreditosAprobadosTotal, byte[] screenShotCuentaBanco, Nullable<int> idBanco, Nullable<int> idSemestre, string abreviaturaBeca, Nullable<int> horas, Nullable<int> carrera)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var carneParameter = carne != null ?
                new ObjectParameter("Carne", carne) :
                new ObjectParameter("Carne", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            var fechaAlmacenamientoParameter = fechaAlmacenamiento.HasValue ?
                new ObjectParameter("FechaAlmacenamiento", fechaAlmacenamiento) :
                new ObjectParameter("FechaAlmacenamiento", typeof(System.DateTime));
    
            var cumpleRequisitosParameter = cumpleRequisitos.HasValue ?
                new ObjectParameter("CumpleRequisitos", cumpleRequisitos) :
                new ObjectParameter("CumpleRequisitos", typeof(bool));
    
            var otraBecaParameter = otraBeca.HasValue ?
                new ObjectParameter("OtraBeca", otraBeca) :
                new ObjectParameter("OtraBeca", typeof(bool));
    
            var otraEscuelaParameter = otraEscuela != null ?
                new ObjectParameter("OtraEscuela", otraEscuela) :
                new ObjectParameter("OtraEscuela", typeof(string));
    
            var otraHorasParameter = otraHoras.HasValue ?
                new ObjectParameter("OtraHoras", otraHoras) :
                new ObjectParameter("OtraHoras", typeof(int));
    
            var ponderadoAnteriorParameter = ponderadoAnterior.HasValue ?
                new ObjectParameter("PonderadoAnterior", ponderadoAnterior) :
                new ObjectParameter("PonderadoAnterior", typeof(int));
    
            var ponderadoGeneralParameter = ponderadoGeneral.HasValue ?
                new ObjectParameter("PonderadoGeneral", ponderadoGeneral) :
                new ObjectParameter("PonderadoGeneral", typeof(int));
    
            var creditosAprobadosAnteriorParameter = creditosAprobadosAnterior.HasValue ?
                new ObjectParameter("CreditosAprobadosAnterior", creditosAprobadosAnterior) :
                new ObjectParameter("CreditosAprobadosAnterior", typeof(int));
    
            var creditosAprobadosTotalParameter = creditosAprobadosTotal.HasValue ?
                new ObjectParameter("CreditosAprobadosTotal", creditosAprobadosTotal) :
                new ObjectParameter("CreditosAprobadosTotal", typeof(int));
    
            var creditosSemestreActualParameter = creditosSemestreActual.HasValue ?
                new ObjectParameter("CreditosSemestreActual", creditosSemestreActual) :
                new ObjectParameter("CreditosSemestreActual", typeof(int));
    
            var cursosPendientesParameter = cursosPendientes.HasValue ?
                new ObjectParameter("CursosPendientes", cursosPendientes) :
                new ObjectParameter("CursosPendientes", typeof(int));
    
            var anosActivoTecParameter = anosActivoTec.HasValue ?
                new ObjectParameter("AnosActivoTec", anosActivoTec) :
                new ObjectParameter("AnosActivoTec", typeof(int));
    
            var numeroCuentaParameter = numeroCuenta.HasValue ?
                new ObjectParameter("NumeroCuenta", numeroCuenta) :
                new ObjectParameter("NumeroCuenta", typeof(int));
    
            var screenShotCedulaParameter = screenShotCedula != null ?
                new ObjectParameter("ScreenShotCedula", screenShotCedula) :
                new ObjectParameter("ScreenShotCedula", typeof(byte[]));
    
            var screenShotPonderadoAnteriorParameter = screenShotPonderadoAnterior != null ?
                new ObjectParameter("ScreenShotPonderadoAnterior", screenShotPonderadoAnterior) :
                new ObjectParameter("ScreenShotPonderadoAnterior", typeof(byte[]));
    
            var screenShotPonderadoGeneralParameter = screenShotPonderadoGeneral != null ?
                new ObjectParameter("ScreenShotPonderadoGeneral", screenShotPonderadoGeneral) :
                new ObjectParameter("ScreenShotPonderadoGeneral", typeof(byte[]));
    
            var screenShotCreditosAprobadosAnteriorParameter = screenShotCreditosAprobadosAnterior != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", screenShotCreditosAprobadosAnterior) :
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", typeof(byte[]));
    
            var screenShotCreditosAprobadosTotalParameter = screenShotCreditosAprobadosTotal != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", screenShotCreditosAprobadosTotal) :
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", typeof(byte[]));
    
            var screenShotCuentaBancoParameter = screenShotCuentaBanco != null ?
                new ObjectParameter("ScreenShotCuentaBanco", screenShotCuentaBanco) :
                new ObjectParameter("ScreenShotCuentaBanco", typeof(byte[]));
    
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("IdBanco", idBanco) :
                new ObjectParameter("IdBanco", typeof(int));
    
            var idSemestreParameter = idSemestre.HasValue ?
                new ObjectParameter("IdSemestre", idSemestre) :
                new ObjectParameter("IdSemestre", typeof(int));
    
            var abreviaturaBecaParameter = abreviaturaBeca != null ?
                new ObjectParameter("AbreviaturaBeca", abreviaturaBeca) :
                new ObjectParameter("AbreviaturaBeca", typeof(string));
    
            var horasParameter = horas.HasValue ?
                new ObjectParameter("Horas", horas) :
                new ObjectParameter("Horas", typeof(int));
    
            var carreraParameter = carrera.HasValue ?
                new ObjectParameter("Carrera", carrera) :
                new ObjectParameter("Carrera", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("almacenarSolicitudAE", cedulaParameter, carneParameter, nombreParameter, apellido1Parameter, apellido2Parameter, emailParameter, telefonoParameter, estadoParameter, fechaAlmacenamientoParameter, cumpleRequisitosParameter, otraBecaParameter, otraEscuelaParameter, otraHorasParameter, ponderadoAnteriorParameter, ponderadoGeneralParameter, creditosAprobadosAnteriorParameter, creditosAprobadosTotalParameter, creditosSemestreActualParameter, cursosPendientesParameter, anosActivoTecParameter, numeroCuentaParameter, screenShotCedulaParameter, screenShotPonderadoAnteriorParameter, screenShotPonderadoGeneralParameter, screenShotCreditosAprobadosAnteriorParameter, screenShotCreditosAprobadosTotalParameter, screenShotCuentaBancoParameter, idBancoParameter, idSemestreParameter, abreviaturaBecaParameter, horasParameter, carreraParameter);
        }
    
        public virtual int editarSolicitudAE(Nullable<int> id, Nullable<int> cedula, string carne, string nombre, string apellido1, string apellido2, string email, Nullable<int> telefono, Nullable<System.DateTime> fechaAlmacenamiento, Nullable<bool> cumpleRequisitos, Nullable<bool> otraBeca, string otraEscuela, Nullable<int> otraHoras, Nullable<int> ponderadoAnterior, Nullable<int> ponderadoGeneral, Nullable<int> creditosAprobadosAnterior, Nullable<int> creditosAprobadosTotal, Nullable<int> creditosSemestreActual, Nullable<int> cursosPendientes, Nullable<int> anosActivoTec, Nullable<int> numeroCuenta, byte[] screenShotCedula, byte[] screenShotPonderadoAnterior, byte[] screenShotPonderadoGeneral, byte[] screenShotCreditosAprobadosAnterior, byte[] screenShotCreditosAprobadosTotal, byte[] screenShotCuentaBanco, Nullable<int> idBanco, Nullable<int> idSemestre, Nullable<int> horas, Nullable<int> carrera)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var carneParameter = carne != null ?
                new ObjectParameter("Carne", carne) :
                new ObjectParameter("Carne", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var fechaAlmacenamientoParameter = fechaAlmacenamiento.HasValue ?
                new ObjectParameter("FechaAlmacenamiento", fechaAlmacenamiento) :
                new ObjectParameter("FechaAlmacenamiento", typeof(System.DateTime));
    
            var cumpleRequisitosParameter = cumpleRequisitos.HasValue ?
                new ObjectParameter("CumpleRequisitos", cumpleRequisitos) :
                new ObjectParameter("CumpleRequisitos", typeof(bool));
    
            var otraBecaParameter = otraBeca.HasValue ?
                new ObjectParameter("OtraBeca", otraBeca) :
                new ObjectParameter("OtraBeca", typeof(bool));
    
            var otraEscuelaParameter = otraEscuela != null ?
                new ObjectParameter("OtraEscuela", otraEscuela) :
                new ObjectParameter("OtraEscuela", typeof(string));
    
            var otraHorasParameter = otraHoras.HasValue ?
                new ObjectParameter("OtraHoras", otraHoras) :
                new ObjectParameter("OtraHoras", typeof(int));
    
            var ponderadoAnteriorParameter = ponderadoAnterior.HasValue ?
                new ObjectParameter("PonderadoAnterior", ponderadoAnterior) :
                new ObjectParameter("PonderadoAnterior", typeof(int));
    
            var ponderadoGeneralParameter = ponderadoGeneral.HasValue ?
                new ObjectParameter("PonderadoGeneral", ponderadoGeneral) :
                new ObjectParameter("PonderadoGeneral", typeof(int));
    
            var creditosAprobadosAnteriorParameter = creditosAprobadosAnterior.HasValue ?
                new ObjectParameter("CreditosAprobadosAnterior", creditosAprobadosAnterior) :
                new ObjectParameter("CreditosAprobadosAnterior", typeof(int));
    
            var creditosAprobadosTotalParameter = creditosAprobadosTotal.HasValue ?
                new ObjectParameter("CreditosAprobadosTotal", creditosAprobadosTotal) :
                new ObjectParameter("CreditosAprobadosTotal", typeof(int));
    
            var creditosSemestreActualParameter = creditosSemestreActual.HasValue ?
                new ObjectParameter("CreditosSemestreActual", creditosSemestreActual) :
                new ObjectParameter("CreditosSemestreActual", typeof(int));
    
            var cursosPendientesParameter = cursosPendientes.HasValue ?
                new ObjectParameter("CursosPendientes", cursosPendientes) :
                new ObjectParameter("CursosPendientes", typeof(int));
    
            var anosActivoTecParameter = anosActivoTec.HasValue ?
                new ObjectParameter("AnosActivoTec", anosActivoTec) :
                new ObjectParameter("AnosActivoTec", typeof(int));
    
            var numeroCuentaParameter = numeroCuenta.HasValue ?
                new ObjectParameter("NumeroCuenta", numeroCuenta) :
                new ObjectParameter("NumeroCuenta", typeof(int));
    
            var screenShotCedulaParameter = screenShotCedula != null ?
                new ObjectParameter("ScreenShotCedula", screenShotCedula) :
                new ObjectParameter("ScreenShotCedula", typeof(byte[]));
    
            var screenShotPonderadoAnteriorParameter = screenShotPonderadoAnterior != null ?
                new ObjectParameter("ScreenShotPonderadoAnterior", screenShotPonderadoAnterior) :
                new ObjectParameter("ScreenShotPonderadoAnterior", typeof(byte[]));
    
            var screenShotPonderadoGeneralParameter = screenShotPonderadoGeneral != null ?
                new ObjectParameter("ScreenShotPonderadoGeneral", screenShotPonderadoGeneral) :
                new ObjectParameter("ScreenShotPonderadoGeneral", typeof(byte[]));
    
            var screenShotCreditosAprobadosAnteriorParameter = screenShotCreditosAprobadosAnterior != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", screenShotCreditosAprobadosAnterior) :
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", typeof(byte[]));
    
            var screenShotCreditosAprobadosTotalParameter = screenShotCreditosAprobadosTotal != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", screenShotCreditosAprobadosTotal) :
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", typeof(byte[]));
    
            var screenShotCuentaBancoParameter = screenShotCuentaBanco != null ?
                new ObjectParameter("ScreenShotCuentaBanco", screenShotCuentaBanco) :
                new ObjectParameter("ScreenShotCuentaBanco", typeof(byte[]));
    
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("IdBanco", idBanco) :
                new ObjectParameter("IdBanco", typeof(int));
    
            var idSemestreParameter = idSemestre.HasValue ?
                new ObjectParameter("IdSemestre", idSemestre) :
                new ObjectParameter("IdSemestre", typeof(int));
    
            var horasParameter = horas.HasValue ?
                new ObjectParameter("Horas", horas) :
                new ObjectParameter("Horas", typeof(int));
    
            var carreraParameter = carrera.HasValue ?
                new ObjectParameter("Carrera", carrera) :
                new ObjectParameter("Carrera", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarSolicitudAE", idParameter, cedulaParameter, carneParameter, nombreParameter, apellido1Parameter, apellido2Parameter, emailParameter, telefonoParameter, fechaAlmacenamientoParameter, cumpleRequisitosParameter, otraBecaParameter, otraEscuelaParameter, otraHorasParameter, ponderadoAnteriorParameter, ponderadoGeneralParameter, creditosAprobadosAnteriorParameter, creditosAprobadosTotalParameter, creditosSemestreActualParameter, cursosPendientesParameter, anosActivoTecParameter, numeroCuentaParameter, screenShotCedulaParameter, screenShotPonderadoAnteriorParameter, screenShotPonderadoGeneralParameter, screenShotCreditosAprobadosAnteriorParameter, screenShotCreditosAprobadosTotalParameter, screenShotCuentaBancoParameter, idBancoParameter, idSemestreParameter, horasParameter, carreraParameter);
        }
    
        public virtual int almacenarSolicitudHATU(Nullable<int> cedula, string carne, string nombre, string apellido1, string apellido2, string email, Nullable<int> telefono, Nullable<int> estado, Nullable<System.DateTime> fechaAlmacenamiento, Nullable<bool> cumpleRequisitos, Nullable<bool> otraBeca, string otraEscuela, Nullable<int> otraHoras, Nullable<int> ponderadoAnterior, Nullable<int> ponderadoGeneral, Nullable<int> creditosAprobadosAnterior, Nullable<int> creditosAprobadosTotal, Nullable<int> creditosSemestreActual, Nullable<int> cursosPendientes, Nullable<int> anosActivoTec, Nullable<int> numeroCuenta, byte[] screenShotCedula, byte[] screenShotPonderadoAnterior, byte[] screenShotPonderadoGeneral, byte[] screenShotCreditosAprobadosAnterior, byte[] screenShotCreditosAprobadosTotal, byte[] screenShotCuentaBanco, byte[] screenShotNota, Nullable<int> idBanco, Nullable<int> idSemestre, string abreviaturaBeca, string codigo, string nombreCurso, Nullable<int> nota, string nombreResponsable, Nullable<int> carrera)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var carneParameter = carne != null ?
                new ObjectParameter("Carne", carne) :
                new ObjectParameter("Carne", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            var fechaAlmacenamientoParameter = fechaAlmacenamiento.HasValue ?
                new ObjectParameter("FechaAlmacenamiento", fechaAlmacenamiento) :
                new ObjectParameter("FechaAlmacenamiento", typeof(System.DateTime));
    
            var cumpleRequisitosParameter = cumpleRequisitos.HasValue ?
                new ObjectParameter("CumpleRequisitos", cumpleRequisitos) :
                new ObjectParameter("CumpleRequisitos", typeof(bool));
    
            var otraBecaParameter = otraBeca.HasValue ?
                new ObjectParameter("OtraBeca", otraBeca) :
                new ObjectParameter("OtraBeca", typeof(bool));
    
            var otraEscuelaParameter = otraEscuela != null ?
                new ObjectParameter("OtraEscuela", otraEscuela) :
                new ObjectParameter("OtraEscuela", typeof(string));
    
            var otraHorasParameter = otraHoras.HasValue ?
                new ObjectParameter("OtraHoras", otraHoras) :
                new ObjectParameter("OtraHoras", typeof(int));
    
            var ponderadoAnteriorParameter = ponderadoAnterior.HasValue ?
                new ObjectParameter("PonderadoAnterior", ponderadoAnterior) :
                new ObjectParameter("PonderadoAnterior", typeof(int));
    
            var ponderadoGeneralParameter = ponderadoGeneral.HasValue ?
                new ObjectParameter("PonderadoGeneral", ponderadoGeneral) :
                new ObjectParameter("PonderadoGeneral", typeof(int));
    
            var creditosAprobadosAnteriorParameter = creditosAprobadosAnterior.HasValue ?
                new ObjectParameter("CreditosAprobadosAnterior", creditosAprobadosAnterior) :
                new ObjectParameter("CreditosAprobadosAnterior", typeof(int));
    
            var creditosAprobadosTotalParameter = creditosAprobadosTotal.HasValue ?
                new ObjectParameter("CreditosAprobadosTotal", creditosAprobadosTotal) :
                new ObjectParameter("CreditosAprobadosTotal", typeof(int));
    
            var creditosSemestreActualParameter = creditosSemestreActual.HasValue ?
                new ObjectParameter("CreditosSemestreActual", creditosSemestreActual) :
                new ObjectParameter("CreditosSemestreActual", typeof(int));
    
            var cursosPendientesParameter = cursosPendientes.HasValue ?
                new ObjectParameter("CursosPendientes", cursosPendientes) :
                new ObjectParameter("CursosPendientes", typeof(int));
    
            var anosActivoTecParameter = anosActivoTec.HasValue ?
                new ObjectParameter("AnosActivoTec", anosActivoTec) :
                new ObjectParameter("AnosActivoTec", typeof(int));
    
            var numeroCuentaParameter = numeroCuenta.HasValue ?
                new ObjectParameter("NumeroCuenta", numeroCuenta) :
                new ObjectParameter("NumeroCuenta", typeof(int));
    
            var screenShotCedulaParameter = screenShotCedula != null ?
                new ObjectParameter("ScreenShotCedula", screenShotCedula) :
                new ObjectParameter("ScreenShotCedula", typeof(byte[]));
    
            var screenShotPonderadoAnteriorParameter = screenShotPonderadoAnterior != null ?
                new ObjectParameter("ScreenShotPonderadoAnterior", screenShotPonderadoAnterior) :
                new ObjectParameter("ScreenShotPonderadoAnterior", typeof(byte[]));
    
            var screenShotPonderadoGeneralParameter = screenShotPonderadoGeneral != null ?
                new ObjectParameter("ScreenShotPonderadoGeneral", screenShotPonderadoGeneral) :
                new ObjectParameter("ScreenShotPonderadoGeneral", typeof(byte[]));
    
            var screenShotCreditosAprobadosAnteriorParameter = screenShotCreditosAprobadosAnterior != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", screenShotCreditosAprobadosAnterior) :
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", typeof(byte[]));
    
            var screenShotCreditosAprobadosTotalParameter = screenShotCreditosAprobadosTotal != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", screenShotCreditosAprobadosTotal) :
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", typeof(byte[]));
    
            var screenShotCuentaBancoParameter = screenShotCuentaBanco != null ?
                new ObjectParameter("ScreenShotCuentaBanco", screenShotCuentaBanco) :
                new ObjectParameter("ScreenShotCuentaBanco", typeof(byte[]));
    
            var screenShotNotaParameter = screenShotNota != null ?
                new ObjectParameter("ScreenShotNota", screenShotNota) :
                new ObjectParameter("ScreenShotNota", typeof(byte[]));
    
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("IdBanco", idBanco) :
                new ObjectParameter("IdBanco", typeof(int));
    
            var idSemestreParameter = idSemestre.HasValue ?
                new ObjectParameter("IdSemestre", idSemestre) :
                new ObjectParameter("IdSemestre", typeof(int));
    
            var abreviaturaBecaParameter = abreviaturaBeca != null ?
                new ObjectParameter("AbreviaturaBeca", abreviaturaBeca) :
                new ObjectParameter("AbreviaturaBeca", typeof(string));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var nombreCursoParameter = nombreCurso != null ?
                new ObjectParameter("NombreCurso", nombreCurso) :
                new ObjectParameter("NombreCurso", typeof(string));
    
            var notaParameter = nota.HasValue ?
                new ObjectParameter("Nota", nota) :
                new ObjectParameter("Nota", typeof(int));
    
            var nombreResponsableParameter = nombreResponsable != null ?
                new ObjectParameter("NombreResponsable", nombreResponsable) :
                new ObjectParameter("NombreResponsable", typeof(string));
    
            var carreraParameter = carrera.HasValue ?
                new ObjectParameter("Carrera", carrera) :
                new ObjectParameter("Carrera", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("almacenarSolicitudHATU", cedulaParameter, carneParameter, nombreParameter, apellido1Parameter, apellido2Parameter, emailParameter, telefonoParameter, estadoParameter, fechaAlmacenamientoParameter, cumpleRequisitosParameter, otraBecaParameter, otraEscuelaParameter, otraHorasParameter, ponderadoAnteriorParameter, ponderadoGeneralParameter, creditosAprobadosAnteriorParameter, creditosAprobadosTotalParameter, creditosSemestreActualParameter, cursosPendientesParameter, anosActivoTecParameter, numeroCuentaParameter, screenShotCedulaParameter, screenShotPonderadoAnteriorParameter, screenShotPonderadoGeneralParameter, screenShotCreditosAprobadosAnteriorParameter, screenShotCreditosAprobadosTotalParameter, screenShotCuentaBancoParameter, screenShotNotaParameter, idBancoParameter, idSemestreParameter, abreviaturaBecaParameter, codigoParameter, nombreCursoParameter, notaParameter, nombreResponsableParameter, carreraParameter);
        }
    
        public virtual int editarSolicitudHATU(Nullable<int> id, Nullable<int> cedula, string carne, string nombre, string apellido1, string apellido2, string email, Nullable<int> telefono, Nullable<System.DateTime> fechaAlmacenamiento, Nullable<bool> cumpleRequisitos, Nullable<bool> otraBeca, string otraEscuela, Nullable<int> otraHoras, Nullable<int> ponderadoAnterior, Nullable<int> ponderadoGeneral, Nullable<int> creditosAprobadosAnterior, Nullable<int> creditosAprobadosTotal, Nullable<int> creditosSemestreActual, Nullable<int> cursosPendientes, Nullable<int> anosActivoTec, Nullable<int> numeroCuenta, byte[] screenShotCedula, byte[] screenShotPonderadoAnterior, byte[] screenShotPonderadoGeneral, byte[] screenShotCreditosAprobadosAnterior, byte[] screenShotCreditosAprobadosTotal, byte[] screenShotCuentaBanco, byte[] screenShotNota, Nullable<int> idBanco, Nullable<int> idSemestre, string codigo, string nombreCurso, Nullable<int> nota, string nombreResponsable, Nullable<int> carrera)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var carneParameter = carne != null ?
                new ObjectParameter("Carne", carne) :
                new ObjectParameter("Carne", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var fechaAlmacenamientoParameter = fechaAlmacenamiento.HasValue ?
                new ObjectParameter("FechaAlmacenamiento", fechaAlmacenamiento) :
                new ObjectParameter("FechaAlmacenamiento", typeof(System.DateTime));
    
            var cumpleRequisitosParameter = cumpleRequisitos.HasValue ?
                new ObjectParameter("CumpleRequisitos", cumpleRequisitos) :
                new ObjectParameter("CumpleRequisitos", typeof(bool));
    
            var otraBecaParameter = otraBeca.HasValue ?
                new ObjectParameter("OtraBeca", otraBeca) :
                new ObjectParameter("OtraBeca", typeof(bool));
    
            var otraEscuelaParameter = otraEscuela != null ?
                new ObjectParameter("OtraEscuela", otraEscuela) :
                new ObjectParameter("OtraEscuela", typeof(string));
    
            var otraHorasParameter = otraHoras.HasValue ?
                new ObjectParameter("OtraHoras", otraHoras) :
                new ObjectParameter("OtraHoras", typeof(int));
    
            var ponderadoAnteriorParameter = ponderadoAnterior.HasValue ?
                new ObjectParameter("PonderadoAnterior", ponderadoAnterior) :
                new ObjectParameter("PonderadoAnterior", typeof(int));
    
            var ponderadoGeneralParameter = ponderadoGeneral.HasValue ?
                new ObjectParameter("PonderadoGeneral", ponderadoGeneral) :
                new ObjectParameter("PonderadoGeneral", typeof(int));
    
            var creditosAprobadosAnteriorParameter = creditosAprobadosAnterior.HasValue ?
                new ObjectParameter("CreditosAprobadosAnterior", creditosAprobadosAnterior) :
                new ObjectParameter("CreditosAprobadosAnterior", typeof(int));
    
            var creditosAprobadosTotalParameter = creditosAprobadosTotal.HasValue ?
                new ObjectParameter("CreditosAprobadosTotal", creditosAprobadosTotal) :
                new ObjectParameter("CreditosAprobadosTotal", typeof(int));
    
            var creditosSemestreActualParameter = creditosSemestreActual.HasValue ?
                new ObjectParameter("CreditosSemestreActual", creditosSemestreActual) :
                new ObjectParameter("CreditosSemestreActual", typeof(int));
    
            var cursosPendientesParameter = cursosPendientes.HasValue ?
                new ObjectParameter("CursosPendientes", cursosPendientes) :
                new ObjectParameter("CursosPendientes", typeof(int));
    
            var anosActivoTecParameter = anosActivoTec.HasValue ?
                new ObjectParameter("AnosActivoTec", anosActivoTec) :
                new ObjectParameter("AnosActivoTec", typeof(int));
    
            var numeroCuentaParameter = numeroCuenta.HasValue ?
                new ObjectParameter("NumeroCuenta", numeroCuenta) :
                new ObjectParameter("NumeroCuenta", typeof(int));
    
            var screenShotCedulaParameter = screenShotCedula != null ?
                new ObjectParameter("ScreenShotCedula", screenShotCedula) :
                new ObjectParameter("ScreenShotCedula", typeof(byte[]));
    
            var screenShotPonderadoAnteriorParameter = screenShotPonderadoAnterior != null ?
                new ObjectParameter("ScreenShotPonderadoAnterior", screenShotPonderadoAnterior) :
                new ObjectParameter("ScreenShotPonderadoAnterior", typeof(byte[]));
    
            var screenShotPonderadoGeneralParameter = screenShotPonderadoGeneral != null ?
                new ObjectParameter("ScreenShotPonderadoGeneral", screenShotPonderadoGeneral) :
                new ObjectParameter("ScreenShotPonderadoGeneral", typeof(byte[]));
    
            var screenShotCreditosAprobadosAnteriorParameter = screenShotCreditosAprobadosAnterior != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", screenShotCreditosAprobadosAnterior) :
                new ObjectParameter("ScreenShotCreditosAprobadosAnterior", typeof(byte[]));
    
            var screenShotCreditosAprobadosTotalParameter = screenShotCreditosAprobadosTotal != null ?
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", screenShotCreditosAprobadosTotal) :
                new ObjectParameter("ScreenShotCreditosAprobadosTotal", typeof(byte[]));
    
            var screenShotCuentaBancoParameter = screenShotCuentaBanco != null ?
                new ObjectParameter("ScreenShotCuentaBanco", screenShotCuentaBanco) :
                new ObjectParameter("ScreenShotCuentaBanco", typeof(byte[]));
    
            var screenShotNotaParameter = screenShotNota != null ?
                new ObjectParameter("ScreenShotNota", screenShotNota) :
                new ObjectParameter("ScreenShotNota", typeof(byte[]));
    
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("IdBanco", idBanco) :
                new ObjectParameter("IdBanco", typeof(int));
    
            var idSemestreParameter = idSemestre.HasValue ?
                new ObjectParameter("IdSemestre", idSemestre) :
                new ObjectParameter("IdSemestre", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var nombreCursoParameter = nombreCurso != null ?
                new ObjectParameter("NombreCurso", nombreCurso) :
                new ObjectParameter("NombreCurso", typeof(string));
    
            var notaParameter = nota.HasValue ?
                new ObjectParameter("Nota", nota) :
                new ObjectParameter("Nota", typeof(int));
    
            var nombreResponsableParameter = nombreResponsable != null ?
                new ObjectParameter("NombreResponsable", nombreResponsable) :
                new ObjectParameter("NombreResponsable", typeof(string));
    
            var carreraParameter = carrera.HasValue ?
                new ObjectParameter("Carrera", carrera) :
                new ObjectParameter("Carrera", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarSolicitudHATU", idParameter, cedulaParameter, carneParameter, nombreParameter, apellido1Parameter, apellido2Parameter, emailParameter, telefonoParameter, fechaAlmacenamientoParameter, cumpleRequisitosParameter, otraBecaParameter, otraEscuelaParameter, otraHorasParameter, ponderadoAnteriorParameter, ponderadoGeneralParameter, creditosAprobadosAnteriorParameter, creditosAprobadosTotalParameter, creditosSemestreActualParameter, cursosPendientesParameter, anosActivoTecParameter, numeroCuentaParameter, screenShotCedulaParameter, screenShotPonderadoAnteriorParameter, screenShotPonderadoGeneralParameter, screenShotCreditosAprobadosAnteriorParameter, screenShotCreditosAprobadosTotalParameter, screenShotCuentaBancoParameter, screenShotNotaParameter, idBancoParameter, idSemestreParameter, codigoParameter, nombreCursoParameter, notaParameter, nombreResponsableParameter, carreraParameter);
        }
    
        public virtual int cambiarIdEstado(Nullable<int> id, Nullable<int> idEstado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cambiarIdEstado", idParameter, idEstadoParameter);
        }
    
        public virtual int cambiarEstado(Nullable<int> id, Nullable<int> estado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cambiarEstado", idParameter, estadoParameter);
        }
    
        public virtual int enviarSolicitudGuardada(Nullable<int> id, Nullable<int> estado, Nullable<System.DateTime> fecha)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("enviarSolicitudGuardada", idParameter, estadoParameter, fechaParameter);
        }
    
        public virtual int rechazarSolicitud(Nullable<int> id, Nullable<int> estado, string observacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rechazarSolicitud", idParameter, estadoParameter, observacionParameter);
        }
    
        public virtual int aprobarSolicitud(Nullable<int> idSolicitud, string idEstudiante, Nullable<int> idResponsable, string observacion, Nullable<int> horasAsignadas, Nullable<int> idEstado)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var idEstudianteParameter = idEstudiante != null ?
                new ObjectParameter("IdEstudiante", idEstudiante) :
                new ObjectParameter("IdEstudiante", typeof(string));
    
            var idResponsableParameter = idResponsable.HasValue ?
                new ObjectParameter("IdResponsable", idResponsable) :
                new ObjectParameter("IdResponsable", typeof(int));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            var horasAsignadasParameter = horasAsignadas.HasValue ?
                new ObjectParameter("HorasAsignadas", horasAsignadas) :
                new ObjectParameter("HorasAsignadas", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aprobarSolicitud", idSolicitudParameter, idEstudianteParameter, idResponsableParameter, observacionParameter, horasAsignadasParameter, idEstadoParameter);
        }
    
        public virtual int insertarTransaccion(Nullable<int> idResponsable, Nullable<System.DateTime> fecha, Nullable<int> idSolicitud, Nullable<int> idEstado)
        {
            var idResponsableParameter = idResponsable.HasValue ?
                new ObjectParameter("IdResponsable", idResponsable) :
                new ObjectParameter("IdResponsable", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarTransaccion", idResponsableParameter, fechaParameter, idSolicitudParameter, idEstadoParameter);
        }
    
        public virtual int cancelarSolicitudRevisada(Nullable<int> id, Nullable<int> estado, string observacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cancelarSolicitudRevisada", idParameter, estadoParameter, observacionParameter);
        }
    }
}
